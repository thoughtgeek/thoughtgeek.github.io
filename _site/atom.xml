<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Thoughtgeek</title>
 <link href="thoughtgeek.com/atom.xml" rel="self"/>
 <link href="thoughtgeek.com/"/>
 <updated>2021-09-26T16:58:56+05:30</updated>
 <id>thoughtgeek.com</id>
 <author>
   <name></name>
   <email>contact@thoughtgeek.com</email>
 </author>

 
 <entry>
   <title>Some powerful features of Python</title>
   <link href="thoughtgeek.com/2020/07/16/powerful-python-features"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>thoughtgeek.com/2020/07/16/Powerful-python-features</id>
   <content type="html">&lt;p&gt;Coding in Python for a year now has been quite a pleasurable experience and frankly I would trade it for no other language given that the simplicity of Python provides a much more friendly learning curve than anything else out there. For example, in Python, nothing obliges you to write classes and instantiate objects from them. If you don’t need complex structures in your project, you can just write functions. Even better, you can write a flat script for executing some simple and quick task without structuring the code at all.&lt;/p&gt;

&lt;p&gt;Python’s philosophy is built on top of the idea of well thought out best practices. Python is a dynamic language and as such, already implements, or makes it easy to implement, a number of popular design patterns with a few lines of code. However, Python programs are easily scalable and the language is versatile enough to provide various degrees of control which as and when needed can be used to solve problems in a much efficient way. This article will talk about a few of those features which I personally find distinctive of the Python language.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-double-underscore-__--of-python&quot;&gt;Understanding the double-underscore( __ ) of Python&lt;/h2&gt;

&lt;p&gt;Methods that begin and end with a double underscore are called dunder (a contraction of “double underscore”) or magic methods.&lt;/p&gt;

&lt;p&gt;What’s the magic? Well, they are never called directly–instead, they are called via a mapping from a built-in function or operator, or, in the case of __init__, it is called automagically when an object is created.&lt;/p&gt;

&lt;p&gt;Let’s start with __init__, since it’s the first one people typically learn:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Thing:
    def __init__(self):
        print(&apos;In __init__!&apos;)
    
&amp;gt;&amp;gt;&amp;gt; t = Thing()
In __init__!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you see that __init__ an initializer method is called when I created a new Thing object.&lt;/p&gt;

&lt;p&gt;Suppose I want to add two Thing objects together–it doesn’t work, because my Thing type has not defined what it means to add two Things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; t1 = Thing()
In __init__!

&amp;gt;&amp;gt;&amp;gt; t2 = Thing()
In __init__!

&amp;gt;&amp;gt;&amp;gt; t1 + t2
Traceback (most recent call last):
File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: &apos;Thing&apos; and &apos;Thing&apos;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s fix that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class Thing:
...	def __init__(self, moniker):
... 		self.moniker = moniker
...
... def __add__(self, other):
... 	print(&apos;In __add__!&apos;)
... 	return Thing(self.moniker + &apos; &apos; + other.moniker)
...
&amp;gt;&amp;gt;&amp;gt; t1 = Thing(&apos;one&apos;)
&amp;gt;&amp;gt;&amp;gt; t2 = Thing(&apos;two&apos;)
&amp;gt;&amp;gt;&amp;gt; t3 = t1 + t2
In __add__!

&amp;gt;&amp;gt;&amp;gt; t3.moniker
&apos;one two&apos;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we see that we can use the good old plus sign for addition, and when we do that, Python invokes the &lt;strong&gt;add&lt;/strong&gt; method for Thing objects.&lt;/p&gt;

&lt;p&gt;We could invoke &lt;strong&gt;add&lt;/strong&gt; directly, even for integers, if we wanted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; int.__add__(2, 2)
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could say that operators such as + invoke dunder methods under the hood.&lt;/p&gt;

&lt;p&gt;But sometimes Python’s built-in functions invoke dunder methods. len() is a good example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;len(&apos;Python&apos;)
6
&amp;gt;&amp;gt;&amp;gt;&apos;Python&apos;.__len__()
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when we call len() on an object, Python invokes &lt;strong&gt;len&lt;/strong&gt;() for that object. Let’s try it on an int:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = 4
&amp;gt;&amp;gt;&amp;gt; len(x)
Traceback (most recent call last):
File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: object of type &apos;int&apos; has no len()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only reason it doesn’t work is because the int object has no &lt;strong&gt;len&lt;/strong&gt;() method, not because integers are not iterable. Let’s create an int type which has a &lt;strong&gt;len&lt;/strong&gt;() method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class autolen(int):
... def __len__(self):
... return len(str(self))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The autolen object inherits from int and adds a &lt;strong&gt;len&lt;/strong&gt;() method which returns the number of digits in the autolen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = autolen(12345678)
&amp;gt;&amp;gt;&amp;gt; x ** 2
152415765279684
&amp;gt;&amp;gt;&amp;gt; len(x)
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can do int-y stuff with our autolen objects (since it inherits from int) and we can also call len() on them.&lt;/p&gt;

&lt;p&gt;There is an exhaustive list of all such special functions, go check them out: https://docs.python.org/3/reference/datamodel.html#special-method-names&lt;/p&gt;

&lt;h2 id=&quot;what-is-meta-of-classes&quot;&gt;What is meta of classes?&lt;/h2&gt;

&lt;p&gt;A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.&lt;/p&gt;

&lt;p&gt;While in Python you can use arbitrary callables for metaclasses, the better approach is to make it an actual class itself. type is the usual metaclass in Python. type is itself a class, and it is its own type. You won’t be able to recreate something like type purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass type.&lt;/p&gt;

&lt;p&gt;A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the ‘class’ statement) by calling the metaclass. Combined with the normal __init__ and __new__ methods, metaclasses therefore allow you to do ‘extra things’ when creating a class, like registering the new class with some registry or replace the class with something else entirely.&lt;/p&gt;

&lt;p&gt;When the class statement is executed, Python first executes the body of the class statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the __metaclass__ attribute of the class-to-be (if any) or the __metaclass__ global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.&lt;/p&gt;

&lt;p&gt;However, metaclasses actually define the type of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. type.__subclasses__() is an example of a method on the type metaclass. You can also define the normal ‘magic’ methods, like __add__, __iter__ and __getattr__, to implement or change how the class behaves.&lt;/p&gt;

&lt;p&gt;Now let’s simplify what all that jargon means. Let’s consider a situation where a company has 2 teams, one for writing the library for the system while the other team is responsible for more of the application/business logic. The application developers thus use the libraries created for them by the library team. Now, say the application developer wants to be sure that there is a particular method defined in a class from the library from which a derived class is created in the application code. The easiest way to check it would be something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert hasassert (BaseClass, MethodToCheck), “Its not there”  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this is an example of a derived class enforcing some constraints on the base class. How about when the library developers want the base class to enforce some constraints on the derived class? Perfect excuse to use metaclasses!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class BaseMeta(type):
    def __new__(cls, name, bases, body):

    if not &apos;bar&apos; in body:
	    raise TypeError(&apos;Derived class does not have bar defined&apos;)

    return super().__new__(cls, name, bases, body)

class Base(metaclass=BaseMeta):
    def foo(self):
	return self.bar()  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we define the metaclass deriving from the class ‘type’ which checks for the bar method in the derived class and returns an error when it is unable to find it defined. This is the perfect example of one of the key use cases of metaclasses.&lt;/p&gt;

&lt;h2 id=&quot;a-pinch-of-syntactic-sugar-called-decorators&quot;&gt;A pinch of syntactic sugar called decorators&lt;/h2&gt;

&lt;p&gt;Let’s start with the basics: Everything in Python is an object. So functions are objects too. Now that means we could have functions as arguments passed on to another function. These functions are called higher-order functions. Thus, a higher-order function is a function that takes one or more functions as inputs and returns a function. I.e.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h(x) = f(g(x))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where here f() is a higher-order function that takes a function of a single argument, g(x), and returns a function of a single argument, h(x). You can think of f() as modifying the behaviour of g().&lt;/p&gt;

&lt;p&gt;Decorators are syntactic sugar for applying in Python. They make an ugly statement look pretty, that’s it.&lt;/p&gt;

&lt;p&gt;Here is the decorator syntax,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@helloGalaxy
@helloSolarSystem
def hello(targetName=None):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hello = helloGalaxy(helloSolarSystem(hello))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, this is a illustrative description of a decorator. Read through the comments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A decorator is a function that expects ANOTHER function as parameter
def my_shiny_new_decorator(a_function_to_decorate):
    def the_wrapper_around_the_original_function():
	    print &apos;Before the function runs&apos;
        a_function_to_decorate()
        print &apos;After the function runs&apos;
    
    return the_wrapper_around_the_original_function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine you create a function you don’t want to ever touch again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def a_stand_alone_function():
	    print &apos;I am a stand alone function, don’t you dare modify me&apos;
    
    a_stand_alone_function()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;I am a stand alone function, don&apos;t you dare modify me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Well, you can decorate it to extend its behavior. Just pass it to the decorator, it will wrap it dynamically in any code you want and return you a new function ready to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)

a_stand_alone_function_decorated()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is exactly equal to -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@my_shiny_new_decorator  
a_stand _alone_function  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before the function runs
I am a stand alone function, don&apos;t you dare modify me
After the function runs
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;iterators-and-generators-what-are-they&quot;&gt;Iterators and Generators, what are they?&lt;/h1&gt;

&lt;p&gt;In Python, an iterator is an object which implements the iterator protocol. The iterator protocol consists of two methods. The __iter__() method, which must return the iterator object, and the next() method, which returns the next element from a sequence.&lt;/p&gt;

&lt;p&gt;Iterators have several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cleaner code&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iterators can work with infinite sequences&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iterators save resources&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python has several built-in objects, which implement the iterator protocol. For example lists, tuples, strings, dictionaries or files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# iterator.py
str = &quot;formidable&quot;

for e in str:
    print(e, end=&quot; &quot;)

print()

it = iter(str)
print(it.next())
print(it.next())
print(it.next())
print(list(it))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code example, we show a built-in iterator on a string. In Python a string is an immutable sequence of characters. The iter() function returns an iterator on object. We can also use the list() or tuple() functions on iterators.&lt;/p&gt;

&lt;p&gt;To understand this better, let’s pretend that we want to create an object that would let us iterate over a linear sequence of numbers(incremented by 1).&lt;/p&gt;

&lt;p&gt;class Linear_sequence:
    def &lt;strong&gt;init&lt;/strong&gt;(self):
            self.initial = 0
            self.max = 20&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __iter__(self):
        # Return the iterable object (self)
        return self

def next(self):
        # When we need to stop the iteration we just need to raise
        # a StopIteration exception
        if self.initial &amp;gt; self.max:
                raise StopIteration



        # save the value that has to be returned
        value_to_be_returned = self.initial + 1

        # calculate the next values of the sequence
        self.initial += 1

        return value_to_be_returned

def __next__(self):
        # For compatibility with Python3
        return self.next()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == ‘&lt;strong&gt;main&lt;/strong&gt;’:
    seq = Linear_sequence()
    for number in seq:
            print(number)&lt;/p&gt;

&lt;p&gt;As you can see, all we’ve done is creating a class that implements the iteration protocol. This protocol is contained in two methods: the “iter” method that returns the object we would iterate over and the “next” method that is called automatically on each iteration and that returns the value for the current iteration.&lt;/p&gt;

&lt;p&gt;Please note that the protocol in Python 3 is a little different and the “next()” method is called “__next__()”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, lets move on to Generators.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generators in Python are just another way of creating iterable objects and are usually used when you need to create iterable object quickly, without the need of creating a class and adopting the iteration protocol. To create a generator you just need to define a function and then use the yield keyword instead of return.&lt;/p&gt;

&lt;p&gt;So, the Linear sequence in a generator could be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def linear_sequence(max):
a = 0
while a &amp;lt; max:
    a += 1
    yield a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, so simple! Now, if you want to test it just use your new linear sequence generator function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if __name__ == &apos;__main__&apos;:

linear_generator = linear_sequence(20)
# print out all the sequence        
for number in linear_generator:
    print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every generator is an iterator, but not vice versa. A generator is built by calling a function that has one or more yield expressions (yield statements, in Python 2.5 and earlier), and is an object that meets the previous paragraph’s definition of an iterator.&lt;/p&gt;

&lt;p&gt;You may want to use a custom iterator, rather than a generator, when you need a class with somewhat complex state-maintaining behavior, or want to expose other methods besides next (and __iter__ and __init__). Most often, a generator (sometimes, for sufficiently simple needs, a generator expression) is sufficient, and it’s simpler to code because state maintenance (within reasonable limits) is basically “done for you” by the frame getting suspended and resumed.&lt;/p&gt;

&lt;p&gt;So the topics covered show a small glimpse of what power the Python programming language gives us, hence someone can start learning the basics and the rest is taken care of by Python. However, once someone gets better at it, they have more control and ability to take over much of the action that happens under the hood and build out to their desired results.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to write clean code</title>
   <link href="thoughtgeek.com/2020/02/20/clean-code"/>
   <updated>2020-02-20T00:00:00+05:30</updated>
   <id>thoughtgeek.com/2020/02/20/Clean-code</id>
   <content type="html">&lt;h1 id=&quot;book-summary-series&quot;&gt;Book summary series&lt;/h1&gt;
&lt;h3 id=&quot;a-handbook-of-agile-software-craftsmanship-by-robert-c-martin&quot;&gt;A Handbook of Agile Software Craftsmanship by Robert C. Martin&lt;/h3&gt;

&lt;p&gt;Clean code is an awesome book written by Uncle Bob and he absolutely nails it when he talks about the basic principles of writing well thought out human readable code. I thought I would make a small collection of takeaways from great books and I decided to start with this classic more like a reference for myself, but would be great to know if it helped someone else on thier journey.&lt;/p&gt;

&lt;h1 id=&quot;chapter-1-clean-code&quot;&gt;Chapter 1: Clean code&lt;/h1&gt;
&lt;p&gt;The first chapter was mostly a dialogue between the author and the reader. He(the author henceforth) broadly talks about these points.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;There will be code&lt;/strong&gt; 
  He argues that code is always going to exist. No matter whatever fancy future code churning AI comes out, we will always need code as means to fine tune software to the ultimate precision and objectivity to fulfill rules written by humans in our own language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bad Code&lt;/strong&gt;
  Here he emphasizes on the LeBlanc’s law: &lt;em&gt;Later equals never&lt;/em&gt;. He talks about how we end up writing bad code or code that is difficult to read and comprehend quickly due to various practical constraints of working at a technology company and even cited a &lt;em&gt;killer app&lt;/em&gt; in 80s that went down because of their messy code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Total cost of owning a mess&lt;/strong&gt;
  He talks how code keeps getting tangled with time and addition of new members working with the code and experienced members leaving the organisation. This ultimately leads to the next point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Grand Redesign in the Sky&lt;/strong&gt;
  Too many problems, lets start redesigning our systems. However when the redesign happens, it has to keep pace with the existing legacy system. This can take a while to complete and by the time, half of the original people starting the redesign have left the firm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Attitude&lt;/strong&gt;
  We should own up to the fact that we are the ones who keep writing messy code for whatever reason and that should change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The art of clean code&lt;/strong&gt;
  Clean code is more like an acquired taste over time of defining what is ‘clean’ and what is not. Everyone might not be easily able to write clean code but should have the eye to spot clean and unclean code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-clean-code&quot;&gt;What is Clean code?&lt;/h3&gt;
&lt;p&gt;Clean code has been defined in many ways. There are some mentions of what clean code means to some of the brightest minds of the tech industry.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bjarne Stroustrup, inventor of C++:&lt;/strong&gt;
&lt;em&gt;I like my code to be elegant and efficient. The logic should be straightforward and make it hard for bugs to hide, the dependencies minimal to ease maintenance, error handling complete according to an articulated strategy, and performance close to optimal so as not to tempt people to make the code messy with unprincipled optimizations. Clean code does one thing well.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Grady Booch, author of Object-Oriented Analysis and Design with Applications:&lt;/strong&gt;
&lt;em&gt;Clean code is simple and direct. Clean code reads like well-written prose. Clean code never obscures the designers’ intent but rather is full of crisp abstractions and straightforward lines of control.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Big” Dave Thomas, founder of OTI and godfather of the Eclipse strategy:&lt;/strong&gt;
&lt;em&gt;Clean code can be read, and enhanced by a developer other than its original author. It has unit and acceptance tests. It has meaningful names. It provides one way rather than many ways for doing one thing. It has minimal dependencies, which are explicitly defined, and provides a clear and minimal API. Code should be literate since, depending on the language, not all necessary information can be expressed clearly in code alone.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Michael Feathers, author of Working Effectively with Legacy Code:&lt;/strong&gt;
&lt;em&gt;I could list all of the qualities that I notice in clean code, but there is one overarching quality that leads to all of them. Clean code always looks like it was written by someone who cares. There is nothing obvious that you can do to make it better. All of those things were thought about by the code’s author, and if you try to imagine improvements, you are led back to where you are, sitting in appreciation of the code someone left for you—code written by someone who cared deeply about the craft.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ward Cunningham, inventor of Wiki and Fit, co-inventor of Extreme Programming.&lt;/strong&gt;
&lt;em&gt;You know you are working with clean code when each routine you read turns out to be pretty much what you expected. You can call it beautiful code when the code also makes it look like the language was made for the problem.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;chapter-2-naming&quot;&gt;Chapter 2: Naming&lt;/h1&gt;
&lt;p&gt;Since naming is something that we as programmers are doing all the time, we better do it right. Here are couple of tips that Uncle Bob has for naming things.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Use Intention revealing names&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Disinformation&lt;/strong&gt; (Avoid any confusing names)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make meaningful distinctions&lt;/strong&gt; (&lt;em&gt;Examples to avoid:&lt;/em&gt; a1,a2… or money, moneyAmount)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use pronouceable names&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Searchable Names&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Encodings&lt;/strong&gt;
 Uncle Bob elaborated on this point mentioning that encoding type or scope information is a bad idea. He mentions multiple notations like - &lt;em&gt;Hungarian Notation, Member prefixes, Interfaces and Implementations.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Mental Mapping&lt;/strong&gt; (Avoid using single letter variables or anything that doesn’t represent what it refers to)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Class names shouldn’t be a verb&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Try starting method names with verbs&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dont use clever or cute names which can only be understood by some&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pick one word per concept&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pick one concept per word&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use solution domain words&lt;/strong&gt; (Use words comprehendable for any programmer)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use problem domain words&lt;/strong&gt; (Use words specific to the problem to the relevant code)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add meaningful context&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid gratuitous context&lt;/strong&gt; (Dont add what you dont need to)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Django vs Flask - Comparison of the python web frameworks</title>
   <link href="thoughtgeek.com/2019/10/03/django-flask"/>
   <updated>2019-10-03T00:00:00+05:30</updated>
   <id>thoughtgeek.com/2019/10/03/django-flask</id>
   <content type="html">&lt;p&gt;I would like to congratulate you for deciding to develop web apps using python. Python is currently one of the most popular programming languages around, favored for its clean, readable code, and flexibility. It is also in high demand because of its wide range of web frameworks that can take your project from idea to reality, in the fastest time possible. Let’s first address the most fundamental question.&lt;/p&gt;

&lt;h1 id=&quot;what-are-web-frameworks&quot;&gt;What are web frameworks?&lt;/h1&gt;
&lt;p&gt;A web framework is a code library that makes web development faster and easier by providing common patterns for building reliable, scalable and maintainable web applications. What that means is that a web framework takes away all the boring and repetitive tasks from you and lets you concentrate on building what you want to build. Pretty cool stuff!&lt;br /&gt;
Frameworks provide functionality in their code or through extensions to perform common operations required to run web applications. These common operations include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL routing&lt;/li&gt;
  &lt;li&gt;Input form handling and validation&lt;/li&gt;
  &lt;li&gt;HTML, XML, JSON, and other output formats with a templating engine&lt;/li&gt;
  &lt;li&gt;Database connection configuration and persistent data manipulation through an object-relational mapper (ORM)&lt;/li&gt;
  &lt;li&gt;Web security against Cross-site request forgery (CSRF), SQL Injection, Cross-site Scripting (XSS) and other common   malicious attacks&lt;/li&gt;
  &lt;li&gt;Session storage and retrieval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now not all frameworks have all the functionalities listed above. Some frameworks take the “batteries-included” approach where everything possible comes bundled with the framework while others have a minimal core package that can be extended later. Here is where the approach of ‘Flask’ and ‘Django’ differ.&lt;/p&gt;

&lt;h1 id=&quot;what-are-flask-and-django-exactly&quot;&gt;What are ‘Flask’ and ‘Django’ exactly?&lt;/h1&gt;
&lt;h5 id=&quot;flask&quot;&gt;Flask:&lt;/h5&gt;
&lt;p&gt;As they describe themselves (From PyPi) - Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around Werkzeug and Jinja and has become one of the most popular Python web application frameworks.
Now what that basically means is that Flask implements a bare-minimum and leaves the bells and whistles to add-ons or to the developer.&lt;/p&gt;
&lt;h5 id=&quot;django&quot;&gt;Django:&lt;/h5&gt;
&lt;p&gt;For Django, they describe themselves (From PyPi) - Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It is a web application framework with a “batteries-included” philosophy. The principle behind batteries-included is that the common functionality for building web applications should come with the framework instead of as separate libraries. Thus the common functionalities listed above are all available in Django to be quickly implemented.&lt;/p&gt;

&lt;p&gt;Now you might be thinking why use Flask when Django already provides all the features out of the box. The answer lies in what you are trying to build. Flask provides simplicity, flexibility and fine-grained control. It is unopinionated (it lets you decide how you want to implement things). Thus if you are building a very simple web app or you need to customize all aspects of the app, Flask is a better option. However, the batteries included in Django makes it easier for Django developers to accomplish common web development tasks like user authentication, URL routing and database schema migration. Also, Django accelerates custom web application development by providing built-in template engine, ORM system, and bootstrapping tool. Sounds confusing? Let’s dig into this further and let you make your own choice.&lt;/p&gt;

&lt;h1 id=&quot;how-do-they-match-up-in-terms-of-performance-with-each-other&quot;&gt;How do they match up in terms of performance with each other?&lt;/h1&gt;
&lt;h5 id=&quot;performance-benchmarks&quot;&gt;Performance Benchmarks:&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/images/benchmarks.png&quot; alt=&quot;benchmarks&quot; /&gt;&lt;a class=&quot;caption&quot; href=&quot;http://klen.github.io/py-frameworks-bench/&quot;&gt;Credit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the benchmark, Flask is significantly faster than Django due to the lightweight nature of the framework. However as I mentioned earlier, Django provides a lot of functionalities which are unavailable in Flask for rapid development and prototyping.&lt;/p&gt;

&lt;h1 id=&quot;how-popular-are-both-the-frameworks&quot;&gt;How popular are both the frameworks?&lt;/h1&gt;
&lt;p&gt;Another key factor for choosing a framework to work with is the way the community embraces it. Let’s look at some popular websites using Flask and Django.&lt;/p&gt;

&lt;h5 id=&quot;websites-using-flask&quot;&gt;Websites using Flask:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Pinterest&lt;/li&gt;
  &lt;li&gt;Reddit&lt;/li&gt;
  &lt;li&gt;Twilio&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;websites-using-django&quot;&gt;Websites using Django:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Instagram&lt;/li&gt;
  &lt;li&gt;Disqus&lt;/li&gt;
  &lt;li&gt;Dropbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also Django beats Flask in two counts. Django is so popular that it has a large community of django developers who come together once, or maybe twice a year for &lt;strong&gt;DjangoCon&lt;/strong&gt; which is their own conference. Unfortunately Flask doesn’t have any equivalent conference.Also, Flask does not have any corporate sponsors in the same league as the ones with Django like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Microsoft&lt;/li&gt;
  &lt;li&gt;Eventbrite&lt;/li&gt;
  &lt;li&gt;Mozilla&lt;/li&gt;
  &lt;li&gt;Caktus Group&lt;/li&gt;
  &lt;li&gt;791 Tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Django has been around for longer — it was first released in 2005, while Flask debuted in 2010 — and is more popular — in January 2017, there were 2631 StackOverflow questions about Django and 575 for Flask. Both frameworks are growing steadily in popularity, as can be seen by the number of StackOverflow questions about each in the image below.
&lt;img src=&quot;/images/so_questions.png&quot; alt=&quot;so_questions&quot; /&gt;
Thus we can see that overall Django has more community engagement than Flask.&lt;/p&gt;

&lt;h1 id=&quot;learning-curve---django-vs-flask&quot;&gt;Learning curve - Django vs Flask:&lt;/h1&gt;
&lt;p&gt;This is one aspect that Flask beats Django by quite a distance. Flask being a lightweight and barebone framework is easier to grasp than Django. However the learning curve for Django can be rewarding as it makes your job easier later. Let’s try to build a ‘Hello World’ app in both these frameworks and you can be the judge.&lt;/p&gt;

&lt;h2 id=&quot;hello-flask&quot;&gt;“Hello Flask”&lt;/h2&gt;
&lt;p&gt;A good practise is to isolate your python environment before installing any packages. This be done using virtual environments. My favourite tool to get this done is ‘virtualenv’. Assuming you are using a debian based distro like Ubuntu, you can do this to install the package -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have virtualenv installed, let’s create a virtual environment and activate it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtualenv -p python3 venv/
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(To deactivate, just type ‘deactivate’)&lt;/p&gt;

&lt;p&gt;The first thing we need to do in order to use Flask is to install it. This can easily be done by using pip.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install flask
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve done that, create a Python file called flaskhello.py and insert the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from flask import Flask

app = Flask(__name__)
@app.route(&quot;/&quot;)
def hello():
 return &quot;Hello, World!&quot;  
if __name__ == &quot;__main__&quot;:
 app.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;lets-understand-what-this-code-does&quot;&gt;Let’s understand what this code does:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Line 1 imports Flask&lt;/li&gt;
  &lt;li&gt;Line 3 initializes an app variable, using the &lt;strong&gt;name&lt;/strong&gt; attribute&lt;/li&gt;
  &lt;li&gt;Line 5 is where the @app.route python decorator takes the function directly below it and modifies it. We use this to route traffic from a specific URL to the function directly below. Using different @app.route calls, we can ‘trigger’ different parts of the code when the user visits different parts of our application. Here, we only have a single route /, which is the default “root” of our application.&lt;/li&gt;
  &lt;li&gt;In Line 6 the function is defined. The name ‘hello’ is not important though it’s always a good practice to give your functions a relevant name.&lt;/li&gt;
  &lt;li&gt;Line 7 returns the string to our user. Usually we would render a template or return HTML here so that users will see a nicely formatted page, but returning a Python string works fine too in our case.&lt;/li&gt;
  &lt;li&gt;Line 9 is normal Python boilerplate to make sure we don’t run anything automatically if our code is imported by another Python script.&lt;/li&gt;
  &lt;li&gt;Line 10 calls the run() method of the app we initialized in Line 3. This starts the development server for Flask and allows us to visit our web application from our local machine by visiting localhost. This also takes optional keyword arguments ‘host’ and ‘port’ in case you want to define that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hello-django&quot;&gt;‘Hello Django’&lt;/h2&gt;
&lt;p&gt;Django can also be installed through pip. Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you installed Django, it also sets up the django-admin command, which we’ll use now. Run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;django-admin startproject hellodjango
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we create a Django “project”, and it will create a hellodjango directory. If we look in the hellodjango directory, we’ll see that it created a manage.py file and a subdirectory which is also called hellodjango. Inside the subdirectory there are three Python scripts. We’ll only need to worry about urls.py for our “Hello World” project.&lt;/p&gt;

&lt;p&gt;The next step is to use Django to create an App, which is an organizational structure below that of a Django Project (one Project can contain many apps). We will use the manage.py file that the previous command created in order to create the application. From the outer hellodjango directory, we run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py startapp helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates the helloworld app and makes it part of our hellodjango project. Now we need to configure the URL routing (like we did with @app.route in Flask). Because Django projects have larger default structure than Flask apps, we’ll have a few extra steps. The previous command created a helloworld directory within the outer hellodjango directory. Open the automatically created helloworld/views.py file and add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse
def index(request):
  return HttpResponse(&quot;Hello, World!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Line 1 imports the HttpResponse function, which we can use to send a string over HTTP to the user of our web app. As with Flask, we wouldn’t usually use this, as we’d want to do more complicated things with rendering HTML templates. However, for our Hello World app this is all we need.&lt;/li&gt;
  &lt;li&gt;In line 3, we’re defining an index function. Here, unlike with Flask, we don’t use a decorator that says this function should be called when the user visits our application. Instead, we’ll set this up via two urls.py files — one for the project, which was automatically created, and one for the application, which we’ll need to create.&lt;/li&gt;
  &lt;li&gt;Line 4 returns the “Hello, World!” string wrapped in an HttpResponse so that it can be displayed in our user’s web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we need to create a urls.py file for our application. Create helloworld/urls.py and add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.conf.urls import url
from . import views
urlpatterns = [
    url(r&apos;^$&apos;, views.index, name=&apos;index&apos;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Line 1 imports the url function so that we can link specific URLs to functions in our views.py file.&lt;/li&gt;
  &lt;li&gt;Line 3 imports the views.py file that we added our “Hello, World” index() view to.&lt;/li&gt;
  &lt;li&gt;Lines 5-7 sets up a list of urlpatterns — this is equivalent to the @app.route decorators that we used in Flask. We match specific URLs using regular expressions, and link these to functions in our views.py script. In this case, we set up a single pattern, which matches an empty URL (like “/” in Flask — in other words, the default page of our application) and links it to the views.index function that we wrote earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s the URL configuration for our app (helloworld). We also need a URL configuration for our project (hellodjango). Edit the hellodjango/hellodjango/urls.py file, which was automatically created (it might be a bit confusing that there are two urls.py files, but it should make sense if you think of one belonging to the entire project, routing URLs to different apps, and the other belonging to the helloworld app alone). Add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.conf.urls import include, url  
urlpatterns = [ 
    url(r&apos;^hello/&apos;, include(&apos;helloworld.urls&apos;)), 
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is similar to the previous file. However, instead of routing URLs of a specific pattern to a specific view, we are routing them to a specific application. In this case, any URL that has /hello after it will be sent along to our helloworld application and will look in helloworld.urls to work out which view to call.
Now go back to the outer /hellodjango directory (the one which contains the manage.py file) and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This runs the Django development server, which lets us visit our application on localhost, as we did with Flask. You should see output that is similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Performing system checks…
System check identified no issues (0 silenced).
You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run &apos;python manage.py migrate&apos; to apply them.
February 03, 2017 - 16:14:20
Django version 1.10.5, using settings &apos;hellodjango.settings&apos;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can ignore the warning about the migrations — this is related to the database for the web application, which we are not using. We can visit http://127.0.0.1:8000/hello to view our “Hello, World!” greeting (don’t forget the /hello at the end, which tells Django which app to visit).&lt;/p&gt;

&lt;h1 id=&quot;so-finally-you-now-know-enough-to-make-your-choice&quot;&gt;So finally you now know enough to make your choice&lt;/h1&gt;
&lt;p&gt;So we have gone through a comparative analysis of the python web frameworks - Flask and Django. Now I think you are armed with enough knowledge to make an informed decision for yourself and your project. So go on, try it yourself!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What to expect when you meet your remote team first time</title>
   <link href="thoughtgeek.com/2019/03/29/meet-your-team"/>
   <updated>2019-03-29T00:00:00+05:30</updated>
   <id>thoughtgeek.com/2019/03/29/Meet-your-team</id>
   <content type="html">&lt;p&gt;&lt;em&gt;“Coming together is a beginning. Keeping together is progress. Working together is success.”&lt;/em&gt; - &lt;strong&gt;Henry Ford&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would share an outsider’s view on working remotely with a multicultural, multinational team where you have colleagues who come from completely different places and backgrounds. You might be sceptical about fitting in a team which has such diversity. The reality was much different than I expected. The team had already been working together for quite a number of years and I was surprised by the warmth with which I was embraced in the envelope despite being a new hire. Here are couple of things I think you should expect when meeting your remote team for the first time in person.&lt;/p&gt;

&lt;h3 id=&quot;be-ready-for-a-new-experience&quot;&gt;Be ready for a new experience&lt;/h3&gt;
&lt;p&gt;If your team camp is somewhere away from home, maybe even a different province if not country, be ready to be surprised by the new culture. Probably it is home or near the home of any of your team member and you would be getting a glimpse of what their daily life might look like. For our case, Johor Bahru is home to our CTO Kamal and exploring the city and nearabouts you get a nice insight into what it might be like for him around the city, the food that he might like, the places he might be around when he is not busy staring at the screen of his laptop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cendol.jpg&quot; alt=&quot;cendol&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;Cendol stall&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;form-a-bond-on-a-personal-level&quot;&gt;Form a bond on a personal level&lt;/h3&gt;
&lt;p&gt;When you stay together with your team you create a special level of bonding with them. Extending my earlier point, you get to understand their habits, likes and dislikes. When working in a remote team, often you forget that you are actually working with a team that has all the human intricacies which are generally associated with working with a onsite/local team. I learnt why I should not ever teach Zaki a game. He beated me straight two times while I was explaining him the rules of the game!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pool.jpg&quot; alt=&quot;pool&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;Playing pool&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;stumble-upon-a-challenge-when-starting-off&quot;&gt;Stumble upon a challenge when starting off&lt;/h3&gt;
&lt;p&gt;This might be more relevant for myself than others, but if you are meeting your team for the first time you might share this opinion too. This was my first meet with the team after being inducted and I found my first assignment to be a bit challenging probably because I was taking the leap from being an intern to a full time member. I was assigned a task to use django-q for asynchronous task processing, which was a new thing for me. It took a while to understand how things worked and the whole process amounted to great learning. I realized that such challenges are just a underwriting of the job role, and that’s exactly what had I signed up for. However, having your team right there to help you during those initial phases can be tremendous boon and make sure you make the most of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hustle.jpg&quot; alt=&quot;hustle&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;At work&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;be-ready-to-eat-a-lot-if-you-are-in-a-team-of-foodies-like-xoxzo&quot;&gt;Be ready to eat a lot if you are in a team of foodies like Xoxzo&lt;/h3&gt;
&lt;p&gt;This maybe a bit exclusive to us at &lt;a href=&quot;https://www.xoxzo.com/en/&quot;&gt;Xoxzo&lt;/a&gt;, but who knows it might even stand true for a lot of teams. As our CEO, Iqbal mentioned about always ending up eating a lot when having a team camp in Malaysia, I assume it is a tradition that didn’t have much of an exception at our team camp at Johor Bahru aswell. With Kamal getting local delicacies and finger food everyday while coming to our apartment to grabbing meals with the team accommodating Josef’s obsession over Nasi Goreng, it was food that made us bond together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/food.jpg&quot; alt=&quot;food&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;Malaysian Food&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;learn-a-lot-of-things-outside-work&quot;&gt;Learn a lot of things outside work￼&lt;/h3&gt;
&lt;p&gt;‘We’ at &lt;a href=&quot;https://www.xoxzo.com/en/&quot;&gt;Xoxzo&lt;/a&gt; comprise of individuals coming from distant cultures. That makes any team camp a melting pot of cultures and we get to learn so much about about each other’s cultures and share about our own while staying and working together. This was a great feeling understanding that though we come from such diverse backgrounds, there are so many things that we have in common. I feel this personally made me a better human and I think it will be a great experience for anyone who embraces diversity with an open mind and arms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/diversity.jpg&quot; alt=&quot;diversity&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;Unity in diversity&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;prepare-to-have-a-lot-of-fun&quot;&gt;Prepare to have a lot of fun&lt;/h3&gt;
&lt;p&gt;Meeting your team will always be fun. This is more of a vacation with a purpose. There will be some great moments you will have with your team. From Kamal’s favourite cendol vendor, to the driving almost to Singapore without a passport, we had a lot of fun moments I will cherish forever about my first meet with the team. Prepare to create yours!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jb_night.jpg&quot; alt=&quot;jb_night&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;JB in night&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;understand-and-absorb-the-culture-of-the-team&quot;&gt;Understand and absorb the culture of the team&lt;/h3&gt;
&lt;p&gt;Every team has a underlying DNA which defines what they stand for. This DNA or the culture of the team is ever changing, just like team itself. Some of it comes from the founders, but mostly it’s a mindset which is shared by the majority of the team. Our team at &lt;a href=&quot;https://www.xoxzo.com/en/&quot;&gt;Xoxzo&lt;/a&gt; is a tight group of individuals, highly passionate about technology and innovation. Our engineering team comprises of  Josef, a keen Raspberry Pi tinkerer, and Zaki, is a information security geek while Geraldo, our marketing guru is the former founder of a novel packaged cocktail company in Brazil. Certainly that reflects a lot about the team!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/team.jpeg&quot; alt=&quot;team&quot; /&gt;&lt;center style=&quot;margin-top: -28px; font-size: .85rem; color: #888;&quot;&gt;The team(partial)&lt;/center&gt;&lt;/p&gt;
&lt;team pic=&quot;&quot;&gt;
&lt;/team&gt;
</content>
 </entry>
 

</feed>
